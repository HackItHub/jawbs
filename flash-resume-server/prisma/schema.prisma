// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// Docker dev database
datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id         String       @id @default(uuid())
  email      String      @unique
  address    Address?
  experience Experience[]
  education  Education[]
  person     Person?      @relation(fields: [personId], references: [id])
  createdAt  DateTime     @default(now())
  personId   String?
}

model Person {
  id         String  @id @default(uuid())
  firstName  String?
  lastName   String?
  middleName String?
  phone      String?
  summary String?
  User       User[]
}

model Address {
  id           Int         @id @default(autoincrement())
  country      String?
  state        String?
  city         String?
  addressLine1 String?
  addressLine2 String?
  zipCode      String?
  user         User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String?     @unique
  experience   Experience? @relation(fields: [experienceId], references: [id], onDelete: Cascade)
  experienceId Int?        @unique

  School School[]
}

model Experience {
  id               Int      @id @default(autoincrement())
  name             String?
  responsibilities String[]
  startYear        String?
  endYear          String?
  startMonth       String?
  endMonth         String?
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String   @unique
  address          Address?
}

model Education {
  id             Int      @id @default(autoincrement())
  educationLevel String
  school         School[]
  User           User?    @relation(fields: [userId], references: [id])
  userId         String?
}

model School {
  id          Int        @id @default(autoincrement())
  school      String
  diploma     String
  startYear   String?
  endYear     String?
  startMonth  String?
  endMonth    String?
  address     Address?   @relation(fields: [addressId], references: [id])
  Education   Education? @relation(fields: [educationId], references: [id])
  educationId Int?
  addressId   Int?
}
